var tipuesearch = {"pages": [{'title': 'homework 1', 'text': '', 'tags': '', 'url': 'homework 1.html'}, {'title': 'PCH11', 'text': '', 'tags': '', 'url': 'PCH11.html'}, {'title': 'Overview\xa0 \xa0總覽', 'text': '\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n In this module, we’re going to discuss the various types of network media. We will begin with fiber-optic cable and then discuss twisted pair cable and coaxial cable. For each of these cable types, we will discuss appearance, characteristics, and types of connectors, as well as speed and limitations. \n 在本模塊中，我們將討論各種類型的網絡媒體。我們將從光纖電纜開始，然後討論雙絞線電纜和同軸電纜。對於每種電纜類型，我們將討論連接器的外觀，特性和類型，以及速度和限制。 \n \n \n Fiber-Optic Cable\xa0\xa0 光纖電纜 \n Fiber-optic cables are constructed by using a glass core at the center of the cable that is surrounded by cladding. In order to send data from one end of the cable to the other, light from a light-emitting diode (LED) or laser is used to transmit the signal down the glass fiber at the center of the cable. Because the data is being transmitted using light, it is immune to the effects of electromagnetic interference (EMI) that impact traditional copper-based cables, such as twisted pair and coaxial cables. Fiber-optic cables possess the ability to send the data a very far distance (many miles) without the use of a repeater. They also can carry a significant amount of data due to their large bandwidth and the information traveling at light speed. Their bandwidth can be measured in gigabits or even terabits per second. There are two types of fiber cables: multimode and single-mode fiber. \n \n 光纖電纜是通過在電纜的中心使用玻璃芯構成的，該芯層被包層圍繞。為了將數據從電纜的一端發送到另一端，可使用來自發光二極管（LED）或激光的光沿電纜中心的玻璃纖維向下傳輸信號。由於數據是通過光傳輸的，因此不受電磁干擾（EMI）的影響，電磁干擾會影響傳統的銅基電纜，如雙絞線和同軸電纜。光纖具有無需使用中繼器就可以很遠的距離（許多英里）發送數據的能力。由於它們的大帶寬和以光速傳播的信息，它們還可以攜帶大量數據。它們的帶寬可以每秒千兆比特或什至兆兆比特來度量。光纖電纜有兩種類型：多模和單模光纖。 兩條電纜的照片，一條帶有紅色末端，另一條帶有黑色末端。兩者均具有銀色連接，其圓柱芯從連接器突出。 \n Multimode fiber cables (MMF) contain a larger core than the single-mode variety. The core size for a multimode fiber is 62.5 microns. A micron is a very small unit of measurement—it is actually even smaller than the width of a human hair. MMF’s larger core enables multiple modes of travel for the light from one end of the cable to the other. This allows a single fiber to carry multiple signals across it, with each signal being transmitted at a slightly different reflective angle. When the light reaches the destination, the signals are then converted back into 1s and 0s and passed to the computer by the network interface card. Multimode fiber is commonly used in shorter distance fiber connections, such as from a router to a switch, a switch to a switch, or a server to a switch. \n 多模光纜（MMF）的芯線比單模光纜大。多模光纖的纖芯尺寸為62.5微米。微米是非常小的度量單位，實際上甚至比人類頭髮的寬度還小。 MMF的較大芯線實現了從電纜一端到另一端的多種傳播模式。這樣一來，單根光纖就可以在其上傳輸多個信號，而每個信號都以稍微不同的反射角傳輸。當光到達目的地時，信號然後被轉換回1和0，然後通過網絡接口卡傳遞到計算機。多模光纖通常用於較短距離的光纖連接中，例如從路由器到交換機，從交換機到交換機或從服務器到交換機。 \n Single-mode fiber cables (SMF) contain a much smaller core than the multimode variety. The core size for SMF is 10 microns. SMF’s smaller core only allows for a single mode of travel for the light from one end of the cable to the other. This straight-through connection allows for data to travel longer distances without a repeater than it can travel using MMF. When the light reaches the destination, the signals are then converted back into 1s and 0s and passed to the computer by the network interface card. Single mode fiber is commonly used in very long distance fiber connections, such as a backbone connection from one local area network to another. \n \n 單模光纜（SMF）的芯線比多模光纜小得多。 SMF的芯尺寸為10微米。 SMF的較小芯線僅允許光從電纜一端到另一端的單一傳播模式。這種直通連接允許數據在沒有中繼器的情況下傳輸的距離比使用MMF傳輸的距離更長。當光到達目的地時，信號然後被轉換回1和0，然後通過網絡接口卡傳遞到計算機。 單模光纖通常用於超長距離的光纖連接中，例如從一個局域網到另一個局域網的骨干連接。 \n \n Fiber-Optic Cable Connectors\xa0\xa0 光纖電纜連接器 \n \n es discussed above: si 用戶連接器（SC）是一種光纖電纜連接器，與普通的音頻和視頻電纜類似，它使用推挽機制鎖入端口。如果要啟用雙向傳輸以發送和接收數據，則需要兩條光纖電纜，因此有時會使用雙SC連接器。 光纖電纜僅屬於上述兩種類型：單模和多模。但是，每條電纜的末端都有四種。 The subscriber connector (SC) is a fiber-optic cable connector that uses a push-pull mechanism to latch into the port, similar to common audio and video cables. If you want to enable bidirectional transmission for sending and receiving data, you need to have two fiber cables, so sometimes a dual SC connector is used. e connector that uses a bayonet plug and socket. It was the first de facto standar \n 用戶連接器（SC）是一種光纖電纜連接器，與普通的音頻和視頻電纜類似，它使用推挽機制鎖入端口。如果要啟用雙向傳輸以發送和接收數據，則需要兩條光纖電纜，因此有時會使用雙SC連接器。\n使用卡口插頭和插座的連接器。這是第一個事實上的標準 The straight tip (ST) connector is a fiber-optic cable connector that uses a bayonet plug and socket. It was the first de facto standard connector for most commercial wiring using fiber cables and it is very commonly found in fiber networks. \n 筆直（ST）連接器是使用卡口插頭和插座的光纖電纜連接器。它是大多數使用光纖電纜進行商業佈線的第一個事實上的標準連接器，並且在光纖網絡中非常常見。 The Lucent connector (LC) is a miniaturized version of the fiber-optic SC connector. It looks somewhat like the SC, but is half the size, with a 1.25 mm ferrule instead of 2.5 mm, making it very useful when connecting multiple devices in a small area, such as on a 24-port switch’s front panel. \n 朗訊連接器（LC）是光纖SC連接器的微型版本。它看上去有點像SC，但尺寸只有一半，只有1.25毫米而不是2.5毫米的套圈，因此在小區域（例如24端口交換機的前面板）連接多個設備時非常有用。 The mechanical transfer-registered jack (MT-RJ) connector is a fiber-optic cable connector that is very popular for small-form-factor devices due to its small size. This connector houses two fibers and mates with locating pins on the plug. These connectors are commonly found connecting a switch to a patch panel, because both devices have a limited area on their front panels. 機械傳輸註冊插孔（MT-RJ）連接器是一種光纖電纜連接器，由於其尺寸小，在小型設備中非常受歡迎。該連接器容納兩根光纖，並與插頭上的定位銷配對。通常發現這些連接器將開關連接到配線架，因為兩個設備的前面板都有有限的區域。 \n \n \n \n \n \n While fiber-optic cable is great for its speed, distance, and security, it hasn’t yet become commonplace in most networks. Instead, we are still using the same type of cabling we have been using for the past two to three decades — twisted pair. Twisted pair cable is the most popular physical LAN media in the world today. Each cable contains four pairs of individually insulated strands of copper wire. Each pair is twisted together to minimize the amount of electromagnetic interference (EMI). The more twists there are in the cable, the less EMI there will be. Twisted pair cable is broken up into two types: unshielded twisted pair (UTP) and shielded twisted pair (STP). \n \n 儘管光纜在速度，距離和安全性方面都非常出色，但在大多數網絡中尚未普及。相反，我們仍在使用過去兩到三十年來一直使用的相同類型的電纜-雙絞線。雙絞線電纜是當今世界上最流行的物理LAN介質。每條電纜包含四對獨立絕緣的銅線。每對絞合在一起以最大程度地減少電磁干擾（EMI）。電纜中的扭曲越多，EMI越小。雙絞線分為兩種類型：非屏蔽雙絞線（UTP）和屏蔽雙絞線（STP）。 \n Shielded twisted pair cable is built very similarly to unshielded twisted pair, except that the pairs of wires are also surrounded by a metallic shielding (like foil). This outer foil shielding minimizes the EMI to which the cable is exposed. This increases the security and reliability of the cable. Unfortunately, however, this also increases the cost of the cable, so it is typically used only in high-production environments where the extra security is worth the extra cost. \n 屏蔽雙絞線電纜的構造與非屏蔽雙絞線非常相似，不同之處在於，成對的電線也被金屬屏蔽層（如金屬箔）圍繞。外部箔屏蔽層可最大程度地減小電纜所遭受的EMI。 這增加了電纜的安全性和可靠性。但是，不幸的是，這也增加了電纜的成本，因此通常僅在高生產環境中使用，在這種環境中，額外的安全性值得額外的成本。\n \n The more common type of cabling is unshielded twisted pair cable. Instead of using extra shielding, this cable relies on the twisting of its copper pairs to minimize the effects of EMI. Each twisted pair is twisted to insulate itself from the other pairs, and because there is no additional shielding, it is available at a lower cost than STP. Therefore, UTP is the most common media of choice for small office, home office, residential, and many commer \n \n \n Categorizing Twisted Pair Cable\xa0 分類雙絞線電纜 \n Twisted pair cable is categorized based on a category (cat) number. For example, cat 3, or category 3, is the oldest type of cable that we use. It was introduced back in the 1980s and 1990s for use in the first star topologies. The maximum throughput or bandwidth of cat 3 cabling is only 10 Mbps (megabits per second). The cat 3, like all twisted pair cabling, cannot go farther than 100 meters without using a repeater, switch, or active hub to amplify the signal. This limited distance is attributable to the copper wiring in these cables. As the signal travels over the copper wire, the natural resistance to the wire decreases the signal’s strength, and it eventually becomes too weak for the distant end to receive. For this reason, there is a 100 meter limitation \n 雙絞線電纜根據類別（類別）編號進行分類。例如，類別3（或類別3）是我們使用的最古老的電纜類型。它是在1980年代和1990年代引入的，用於第一批星形拓撲。Cat 3電纜的最大吞吐量或帶寬僅為10 Mbps（兆位/秒）。與所有雙絞線電纜一樣，如果不使用中繼器，交換機或有源集線器來放大信號，則Cat 3不能走超過100米。這種有限的距離歸因於這些電纜中的銅線。當信號在銅線上傳輸時，導線的固有電阻會降低信號的強度，最終變得太弱，無法接收到遠端。因此，在構建和設計雙絞線網絡時存在100米的限制。 \n Cat 5 cables were an improvement on the older cat 3 cables and contain more twists, giving them more shielding from EMI and a maximum bandwidth of 100 Mbps. Cat 5e, or cat 5 enhanced, increased the speed of the maximum throughput to one Gbps, or 1000 Mbps, and became a gap filler until cat 6 cabling became commonplace. \n Cat 5電纜是對較舊的Cat 3電纜的改進，並包含更多的絞合線，從而使它們具有更大的EMI屏蔽能力，最大帶寬為100 Mbps。 Cat 5e或Cat 5增強後，將最大吞吐量的速度提高到1 Gbps或1000 Mbps，並成為了空白，直到Cat 6電纜變得司空見慣。 \n Cat 6a overcomes the 37-55 meter limitation of cat 6 when used in 10GBaseT. Cat 7, the newest standard, is shielded and provides connections up to 10 Gbps with a maximum distance of 100 meters. “Cat 7 and cat 7a cabling will be used for backbone connections between servers within a data center” and “provide an alternative to using fiber-optic cabling within the data center” (from http://www.cablestogo.com/learning/library/data-center/cat7-overview ). \n \n 當在10GBaseT中使用時，Cat 6a克服了Cat 6的37-55米的限制。最新標準Cat 7被屏蔽，並提供高達10 Gbps的連接，最大距離為100米。 All cable categories up to cat 5e and cat 6a have a maximum distance of 100 meters. When used in 10GBaseT, the maximum distance for cat 6 is 55 meters. Cat 7 is shielded and exceeds the 100 meter limit. As the category of the cable increases, so do the number of twists per inch and the frequency range, allowing for more data and improved protection against EMI. Best practice for copper cabling is\xa0 not \xa0 to run cable lengths to the maximum because attenuation will reduce data capacity. \n \n 直至類別5e和類別6a的所有電纜類別的最大距離為100米。在10GBaseT中使用時，類別6的最大距離為55米。 Cat 7被屏蔽並超過100米的限制。隨著電纜類別的增加，每英寸的捻數和頻率範圍也會增加，從而可以提供更多的數據並改善對EMI的保護。銅纜佈線的最佳實踐是不要使電纜長度最大，因為衰減會降低數據容量。 \n \n Twisted Pair Connectors\xa0 \xa0 雙絞線連接器 \n Twisted pair cables come with three main types of connectors. The first is the RJ-45 connector, which is an eight-pin connector used in Ethernet networks. Even though most Ethernet networks use only four pins, the RJ-45 provides eight pins for future use and capabilities. The first four pins are used to transmit (two pins) and receive (two pins). \n 雙絞線電纜帶有三種主要類型的連接器。第一個是RJ-45連接器，它是以太網網絡中使用的八針連接器。即使大多數以太網僅使用四個引腳，RJ-45仍提供八個引腳供將來使用和使用。前四個引腳用於發送（兩個引腳）和接收（兩個引腳）。 \n The RJ-11 connector is used in the standard telephone system. The RJ-11 is a six-pin connector, but commonly only two pins are used for a telephone (transmit and receive). If you have a two-line phone, then four pins are used: two pins to transmit and two pins to receive. \n RJ-11連接器用於標準電話系統。 RJ-11是一個六針連接器，但電話通常僅使用兩個針（發送和接收）。如果您有兩線電話，則使用四個引腳：兩個引腳用於發送，兩個引腳用於接收。 \n Finally, the DB-9 connector is used for RS-232 signals. This connector looks like a standard serial connector. It is used commonly for asynchronous serial communications, like connecting to an external modem. In modern networks, you will see this type of connector on a “rollover cable.” A rollover cable has a DB-9 on one side (which is connected to your laptop’s serial port), and an RJ-45 connector on the other side (which is used to connect to Cisco routers and switches to do administration tasks). \n 最後，DB-9連接器用於RS-232信號。該連接器看起來像標準的串行連接器。它通常用於異步串行通信，例如連接到外部調製解調器。在現代網絡中，您將在“翻轉電纜”上看到這種類型的連接器。翻轉電纜的一側為DB-9（連接到筆記本電腦的串行端口），另一側為RJ-45連接器（用於連接到Cisco路由器和交換機以執行管理任務）。 A straight-through cable is a type of twisted pair cable that is used in local area networks to connect a computer to a network hub, such as a router. This type of cable is also sometimes called a patch cable. Both ends of the cable have an identical pinout, hence the name “straight-through.” A crossover cable switches the pinouts of the two ends of the cable, making the transmit and receive pins alternate on the two ends. This allows two workstations to connect directly to each other without the need for a hub, switch, or router. 直通電纜是雙絞線電纜的一種，在局域網中用於將計算機連接到網絡集線器（例如路由器）。這種類型的電纜有時也稱為跳線。電纜的兩端都具有相同的引出線，因此名稱為“直通”。交叉電纜切換電纜兩端的引腳分配，使發送和接收引腳在兩端交替。這允許兩個工作站直接相互連接，而無需集線器，交換機或路由器。 \n Coaxial cable is a much older media technology. Coaxial cable, also known as coax for short, is composed of two conductors. The inner conductor, which is known as the insulated conductor (center wire), is the copper wire over which data is passed. The outer conductor is the braided metal shield and aids in protecting the inner wire from physical injury and the effects of EMI. Much like the shielding we saw in shielded twisted pair, the outer shield helps keep electromagnetic interference out of the data’s path. Between the inner conductor and the outer shield, we find an insulated core that prevents any data transfer between the inner core and outer shield. The outside of the cable is made of a flexible plastic jacket, much like the twisted pair cabling. Coaxial cabling was included in the first Ethernet standard as 10Base5 (thicknet) and continued to be used throughout updates as 10Base2 (thinnet) as well as being most commonly used in bus and ring networks. UTP cabling however, is easier to work with in a star topology and is significantly less expensive. \n 同軸電纜是一種較老的媒體技術。同軸電纜（也簡稱為同軸電纜）由兩個導體組成。內部導體（稱為絕緣導體（中心線））是在其上傳遞數據的銅線。外導體是編織的金屬屏蔽層，有助於保護內線免受物理傷害和EMI的影響。就像我們在屏蔽雙絞線中看到的屏蔽一樣，外部屏蔽有助於將電磁干擾排除在數據路徑之外。在內部導體和外部屏蔽層之間，我們找到了一個絕緣芯，可防止在內芯和外部屏蔽層之間進行任何數據傳輸。電纜的外部由柔軟的塑料護套製成，非常類似於雙絞線電纜。同軸電纜已包含在第一個以太網標準中，稱為10Base5（Thicknet），並在整個更新中繼續用作10Base2（Thinnet），並且在總線和環形網絡中最常用。但是，UTP電纜更易於在星形拓撲中使用，並且價格便宜得多。 \n \n Coaxial Cable Types\xa0 同軸電纜類型 \n There are three dominant coaxial cable types. The RG-6 is commonly used by cable TV companies to connect individual homes to the TV network. These cables are thick and usually used for outside connections to withstand the effects of the weather. The RG-58 is a type of coaxial cable that was heavily used in early 10Base2 (thinnet) networks, such as bus and ring topologies. Finally, the RG-59 is the traditional coaxial cable used to carry composite video between two nearby devices, such as your TV and the cable box. If you are a cable Internet user, this is also used to carry the WAN connection from your wall jack to your cable modem. \n \n 共有三種主要的同軸電纜類型。有線電視公司通常使用RG-6將單個房屋連接到電視網絡。這些電纜很粗，通常用於外部連接以承受天氣的影響。 RG-58是一種同軸電纜，在諸如總線和環形拓撲之類的早期10Base2（瘦網）網絡中大量使用。最後，RG-59是傳統的同軸電纜，用於在兩個附近的設備（例如電視和電纜盒）之間傳送複合視頻。如果您是有線Internet用戶，這也可用於將WAN連接從牆壁插孔連接到電纜調製解調器。 \n \n \n \n Coaxial Cable Connectors\xa0\xa0 同軸電纜連接器 \n While there were three types of cables, there are only two types of common connectors used with coaxial cable. The first is called BNC, from the name Bayonet Neill-Concelman. Sometimes people also call this the British Naval connector, because the BNC was heavily used by the British in their shipboard radio systems. This connector was commonly used in early Ethernet networks and it has a “push and twist” type of connector to secure the cable to the network device. \n 雖然有三種類型的電纜，但同軸電纜僅使用兩種類型的普通連接器。第一個稱為BNC，名稱為刺刀Neill-Concelman。有時人們也將其稱為英國海軍連接器，因為英國人在其艦載無線電系統中大量使用了BNC。該連接器通常用於早期的以太網網絡，並且具有“推壓式”連接器，用於將電纜固定至網絡設備。 \n The F-type connector is the modern type of coaxial cable connector. It is typically used for cable TV and cable modem connections. It is connected by screwing the connector onto a threaded jack to secure the connection. \n F型連接器是現代類型的同軸電纜連接器。它通常用於有線電視和電纜調製解調器的連接。通過將連接 \n \n \n \n Categorize characteristics of connectors and cabling. \n \n \n \n \n When we compare the advantages and disadvantages of fiber-optic cables and copper (twisted pair) cables, we have to consider that fiber-optic has a higher bandwidth (measured in Gbps or Tbps), it can carry its signal many miles without the need of a repeater, it is immune to the effects of EMI, and it has much better security than traditional twisted pair cables. However, twisted pair cabling does hold some advantages of its own. For one, it is much less expensive than fiber-optic cabling. Also, copper wiring is much easier to install, taking only a few hours to learn. Finally, twisted pair cabling can be created and terminated using inexpensive tools. For example, a complete copper wiring toolset can be bought online for less than $50, while a complete fiber-optic kit may cost $1000 or more. For these reasons, copper has remained the dominant media in most local area networks. \n 分類連接器和電纜的特性。 當我們比較光纖電纜和銅纜（雙絞線）的優缺點時，我們必須考慮到光纖具有更高的帶寬（以Gbps或Tbps為單位），它可以將信號傳輸很多英里而無需作為中繼器，它不受EMI的影響，並且比傳統的雙絞線電纜具有更好的安全性。但是，雙絞線電纜確實具有其自身的一些優點。首先，它比光纖電纜便宜得多。而且，銅線的安裝更容易，只需幾個小時即可學習。最後，可以使用廉價的工具創建和終止雙絞線電纜。例如，一套完整的銅線工具套件可以在線購買，價格不到50美元，而一套完整的光纖套件的價格可能在1000美元以上。由於這些原因，銅一直是大多數局域網中的主要介質。 \n Because of the wide variety of cable and connector types, there is sometimes a need to convert from one type of media to another. For example, if you have to make a connection between two LANs in buildings that are located one mile apart, but your network uses Cat 5e, UTP cabling, how can you make that connection? When you look at your routers, you find they only accept RJ-45 connections, but you know that you cannot run a Cat 5e cable more than 100 meters. How can you solve this problem? With a media converter. \n \n 由於電纜和連接器的類型多種多樣，因此有時需要從一種類型的媒體轉換為另一種類型的媒體。例如，如果您必須在相距一英里的建築物中的兩個LAN之間建立連接，但是您的網絡使用Cat 5e，UTP電纜，那麼如何建立連接？當您查看路由器時，會發現它們僅接受RJ-45連接，但您知道不能將Cat 5e電纜的長度超過100米。您如何解決這個問題？帶媒體轉換器。 \n Using a media converter, you can convert your RJ-45 connection into an ST, SC, or LC fiber connection, as shown in the image below. Then, you run the one-mile fiber cable to the other building, and use a media converter to convert from the ST, SC, or LC fiber connection back to the RJ-45 the other router requires. Because this is a simple, “dumb” device, it simply converts whatever is received on the first media type and repeats it back out the second media type. Common types of media converters are from Ethernet (copper) to fiber-optic (and back) or coaxial to fiber-optic (and back). \n \n 使用媒體轉換器，您可以將RJ-45連接轉換為ST，SC或LC光纖連接，如下圖所示。然後，將一英里的光纜連接到另一座建築物，並使用媒體轉換器將ST，SC或LC光纖連接轉換回另一台路由器所需的RJ-45。因為這是一個簡單的“啞”設備，所以它僅轉換在第一媒體類型上接收到的所有內容，然後將其重複播放回第二媒體類型。媒體轉換器的常見類型是從以太網（銅）到光纖（然後向後）或從同軸電纜到光纖（然後向後）。 \n', 'tags': '', 'url': 'Overview\xa0 \xa0總覽.html'}, {'title': 'PCH12', 'text': '', 'tags': '', 'url': 'PCH12.html'}, {'title': 'Overview\xa0 \xa0\xa0總覽', 'text': 'In this module, we are going to discuss how the various Ethernet standards developed over time. We will also discuss why there is a need for these standards and the effect of these standards on the industry. In addition, we are going to cover various types of network media standards. We will cover 10Base-T (802.3i, 1990) as well as 100Base-T and 1000Base-T (1GBASE-T or 1 GigE) Ethernet standards, which are most commonly found in current office networks. We will discover how to plan a basic network connection using 100BaseT. Finally, we will cover differences between Ethernet and TCP/IP. \n \n \n 在本模塊中，我們將討論隨著時間的推移如何開發各種以太網標準。我們還將討論為什麼需要這些標準以及這些標準對行業的影響。另外，我們將涵蓋各種類型的網絡媒體標準。我們將介紹10Base-T（802.3i，1990）以及100Base-T和1000Base-T（1GBASE-T或1 GigE）以太網標準，它們是當前辦公網絡中最常見的標準。我們將發現如何使用100BaseT規劃基本的網絡連接。最後，我們將介紹以太網和TCP / IP之間的差異。 \n Before Ethernet was the dominant technology, there were multiple types of networking technologies competing for market share. At one point, Ethernet was just one of many competing standards, including token ring, fiber distributed data interface (FDDI), and more. By the late 1990s, a single standard was clearly the dominant choice in both office and residential networks: IEEE 802.3 Ethernet. Ethernet uses various media types, from coaxial cable to twisted-pair copper and fiber-optic cables (discussed in an earlier module). The 802.3 Ethernet standard and the concept of using frames for communication over various media, including Wireless 802.11, is predominant today, and it is vital to understand the fundamentals of Ethernet including the various speed and distance limitations each standard places on our networks. \n \n \n 在以太網成為主導技術之前，存在多種類型的網絡技術爭奪市場份額。一方面，以太網只是眾多競爭標準之一，包括令牌環，光纖分佈式數據接口（FDDI）等。到1990年代後期，單一標準顯然已成為辦公室和住宅網絡中的主要選擇：IEEE 802.3以太網。以太網使用多種介質類型，從同軸電纜到雙絞銅線和光纖電纜（在較早的模塊中討論）。 802.3以太網標準和使用幀在包括無線802.11在內的各種媒體上進行通信的概念如今非常盛行，了解以太網的基本知識（包括每個標準對我們網絡的各種速度和距離限制）至關重要。 \n \n \n \n The original 802.3 Ethernet standard sent data over coaxial cables at a half-duplex transmission rate which means devices can only transmit (TX) or Receive (RX) alternately at separate intervals because the data used the same path for both. This is analagous to communicating using a walkie-talkie rather than a telephone. \n \n 最初的802.3以太網標準以半雙工傳輸速率通過同軸電纜發送數據，這意味著設備只能以單獨的間隔交替發送（TX）或接收（RX），因為這兩個數據使用相同的路徑。這類似於使用對講機而不是電話進行通信。 \n This coaxial cable design became known as Thicknet and later Thinnet due to the size of the cables and was mostly used in bus and ring network topologies. \n \n \n 由於電纜的尺寸，這種同軸電纜設計被稱為Thinnet，後來被稱為Thinnet，並且主要用於總線和環形網絡拓撲中。 \n \n Thicknet, the original IEEE 802.3 standard designated as 10Base5, provided a maximum bandwidth of 10Mbps and was limited in distance to 500 meters. Thinnet, or IEEE 10Base2, used a smaller type of coaxial and also provided a maximum bandwidth of 10 Mbps, but was limited to 185 meters. Eventually the industry transitioned from coaxial cabling to unshielded twisted-pair cabling. \n 最初被指定為10Base5的IEEE 802.3標準Thicknet提供的最大帶寬為10Mbps，並且距離限制為500米。 Thinnet或IEEE 10Base2使用較小類型的同軸電纜，並且提供的最大帶寬為10 Mbps，但限制為185米。最終，該行業從同軸電纜過渡到非屏蔽雙絞線電纜。 \n Twisted pair cabling, dubbed 10BaseT, provided the same 10 Mbps half-duplex maximum bandwidth with a category 3 cable, but the distance was limited to 100 meters due to the lack of the extra shield that coaxial provided. In spite of the increased attenuation (loss of signal strength over distance), network designers moved to twisted pair cabling because of ease of installation and overall lower cost. Coaxial cable fell out of favor and the 802.3 Ethernet standard continues to evolve with faster data rates over twisted pair cabling categories. \n \n \n 雙絞線電纜（稱為10BaseT）與第3類電纜可提供相同的10 Mbps半雙工最大帶寬，但由於缺少同軸電纜提供的額外屏蔽，因此距離限制為100米。儘管衰減增加（信號強度隨著距離的增加而損失），但由於易於安裝且總體成本較低，網絡設計人員仍選擇雙絞線佈線。同軸電纜不受歡迎，並且802.3以太網標準繼續發展，雙絞線佈線類別的數據速率更快。 \n The design question that Ethernet had to answer was how a device should access the network. The nature of half-duplex transmission (TX or RX) over a single wire pair meant that collisions were imminent. Should the access be deterministic and orderly, or contention-based and chaotic? The older ring-based networks, such as token ring, were developed upon the premise that order was necessary: each machine would wait for its turn to transmit its data until it received the electronic token that was passed around the ring. This is similar to the “talking stick” or “speaker’s staff” used by Native Americans and other aboriginal tribes where the staff (token) gave the person access to speak and the remaining group members listened. Ethernet, on the other hand, is premised upon a contention-based model. This is more chaotic and allows any device on the network to transmit anytime it wishes. The problem with this type of philosophy is figuring out how to prevent two devices from transmitting at the same time and causing a collision of the data. With Ethernet, the answer came in the form of a media access control method called carrier sense multiple access/collision detect (CSMA/CD). \n \n \n 以太網必須回答的設計問題是設備應如何訪問網絡。通過單線對進行半雙工傳輸（TX或RX）的性質意味著衝突迫在眉睫。訪問應該是確定性和有序的，還是基於競爭的且混亂的？較早的基於環的網絡（例如令牌環）是在必須有順序的前提下開發的：每台機器都將等待其輪流發送其數據，直到接收到圍繞環傳遞的電子令牌為止。這類似於美洲原住民和其他原住民部落使用的“說話棒”或“發言人的工作人員”，其中工作人員（令牌）使該人員可以發言，其餘的小組成員則可以收聽。另一方面，以太網以基於競爭的模型為前提。這更加混亂，並且允許網絡上的任何設備在其希望的任何時間進行傳輸。這種類型的原理存在的問題是，要弄清楚如何防止兩個設備同時傳輸並導致數據衝突。對於以太網，答案是以一種稱為載波偵聽多路訪問/衝突檢測（CSMA / CD）的媒體訪問控制方法的形式出現的。 \n The nature of half-duplex transmission brought about the need for CSMA/CD, which works by allowing all devices to transmit data whenever they wish. The carrier sense portion means that the device “listens” to the network first to find a “break” in the conversation. If the device doesn’t hear other devices transmitting, then it begins its transmission. Multiple access refers to every device having equal access to the network at all times. This is unlike the token ring network in which each device had to wait for the signal (token) before transmitting. Finally, we have collision detection as part of the CSMA/CD control method. If, by chance, two devices both were ready to transmit, they “listened” to the network for a “lull” in the conversation, and both started transmitting at the same time, the devices are able to detect that they both transmitted at the same time and caused a collision. \n \n 半雙工傳輸的性質帶來了對CSMA / CD的需求，它允許所有設備在需要時傳輸數據。運營商感知部分意味著設備首先“監聽”網絡以在會話中找到“中斷”。如果該設備聽不到其他設備的傳輸，則開始傳輸。多路訪問是指每台設備始終具有對網絡的平等訪問權限。這與令牌環網絡不同，在令牌環網絡中，每個設備都必須在發送之前等待信號（令牌）。最後，我們將碰撞檢測作為CSMA / CD控制方法的一部分。如果偶然地兩個設備都準備好發送，則它們在通話中“偵聽”網絡中的“失敗”，並且兩個設備都同時開始發送，則這些設備能夠檢測到它們都在發送時發送。同時又造成了碰撞。 \n The image below depicts both the CSMA/CD and CSMA/CA simplified algorithm. The left branch is CSMA/CD used by half-duplex Ethernet and the right branch is CSMA/CA used by 802.11 wireless LAN, which is also half-duplex. \n 下圖描述了CSMA / CD和CSMA / CA簡化算法。左分支是半雙工以太網使用的CSMA / CD，右分支是802.11無線LAN（也是半雙工）使用的CSMA / CA。 \n In the example shown below, four devices are connected in a physical bus topology. Each device has equal access to the network. Here, all the devices are listening, trying to determine if any other device is communicating before beginning transmission. \n 在下面顯示的示例中，四個設備以物理總線拓撲連接。每個設備對網絡都有平等的訪問權限。在這裡，所有設備都在監聽，試圖確定是否有其他設備在開始傳輸之前進行通信。 \n In the next image below, we see an example of two devices that transmitted at the same time. This simultaneous transmission resulted in a data collision, causing the transmission to be broken. \n \n 在下一張圖片中，我們看到了兩個同時傳輸的設備的示例。這種同時傳輸導致數據衝突，導致傳輸中斷。 \n When a collision is detected, both devices choose a backoff time at random, and then attempt to retransmit again. In the diagram below, the computers choose to wait 200 milliseconds and 300 milliseconds, respectively. When that time is up, they will attempt to sense if another machine is already transmitting. If there is nothing detected, the first machine will transmit its message. Once completed, the second machine will then transmit its message, after its 300 millisecond wait time. \n \n \n 當檢測到衝突時，兩個設備都會隨機選擇一個退避時間，然後嘗試重新傳輸。在下圖中，計算機分別選擇等待200毫秒和300毫秒。時間到時，他們將嘗試檢測另一台機器是否已經在傳輸。如果未檢測到任何內容，則第一台機器將發送其消息。一旦完成，第二台機器將在其300毫秒的等待時間之後發送其消息。 \n \n Finally, we need to discuss the various standards we use in Ethernet in terms of bandwidth and distance limitations. \n The Ethernet standard also determines the type of cable, its bandwidth, and its distance limitation. It is important to know these standards, especially those that relate to a category 3, 5, 5e, and 6 cabling standard. \n \n \n \n Ethernet Standard \n Media Type \n Bandwidth Capacity \n Distance Limitation \n \n \n \n \n 10Base5 \n Coax (thicknet) \n 10 Mbps \n 500 m \n \n \n 10Base2 \n Coax (thinnet) \n 10 Mbps \n 185 m \n \n \n 10BaseT \n Cat 3 or higher \n 10 Mbps \n 100 m \n \n \n 100BaseTX \n Cat 5 or higher \n 100 Mbps \n 100 m \n \n \n 1 GBase-T \n Cat 6 or higher \n 1 Gbps \n 100 m \n \n \n 10 GBase-T \n Cat 6 or higher \n 10 Gbps \n 100 m (Cat 6a or 7) \n \n \n 1000BaseLX \n MMF/SMF \n 1 Gbps \n 5 km \n \n \n 1000BaseLH \n SMF \n 1 Gbps \n 10 km \n \n \n 1000BaseZX \n SMF \n 1 Gbps \n 70 km \n \n \n \n \n \n 最後，我們需要討論帶寬和距離限制方面在以太網中使用的各種標準。 以太網標準還確定電纜的類型，帶寬和距離限制。重要的是要知道這些標準，尤其是與3、5、5e和6類佈線標準有關的標準。 以太網標準媒體類型帶寬容量距離限制 10Base5同軸電纜（厚網）10 Mbps 500 m 10Base2同軸電纜（細線）10 Mbps 185 m 10BaseT Cat 3或更高10 Mbps 100 m 100BaseTX Cat 5或更高100 Mbps 100 m 1 GBase-T Cat 6或更高1 Gbps 100 m 10 GBase-T Cat 6或更高版本10 Gbps 100 m（Cat 6a或7） 1000BaseLX MMF / SMF 1 Gbps 5公里 1000BaseLH SMF 1 Gbps 10公里 1000BaseZX SMF 1 Gbps 70公里 \n When discussing data flow and speed, the two terms referred to are bandwidth and throughput. Often used interchangeably, the two terms are different and need to be understood. Simply put, bandwidth is the theoretical maximum of the given standard, whereas throughput is the actual potential in a real-world scenario. Many factors affect actual throughput, such as half-duplex vs. full-duplex, cable length, and quality. Both bandwidth and throughput are measured in bits per second (bps) with the prefix K (kilobit), M (megabit), or G (gigabit). Each Ethernet category (cat) cable supports a different Ethernet standard and thereby determines the bandwidth capacity or maximum throughput. The table below shows the bandwidth according to Ethernet type. \n \n \n \n EthernetType \n BandwidthCapacity \n Description \n \n \n \n \n Ethernet \n 10 Mbps \n 10 million bits per second \n \n \n Fast Ethernet \n 100 Mbps \n 100 million bits per second \n \n \n Gigabit Ethernet \n 1000 Mbps or1 Gbps \n 1 billion bits per second \n \n \n 40-Gigabit Ethernet \n 40 Gbps \n 40 billion bits per second \n \n \n 100-Gigabit Ethernet \n 100 Gbps \n \n 100 billion bits per second \n \n \n \n \n \n \n 在討論數據流和速度時，所指的兩個術語是帶寬和吞吐量。這兩個術語通常可以互換使用，它們是不同的，需要理解。簡而言之，帶寬是給定標準的理論最大值，而吞吐量是實際情況下的實際潛力。許多因素會影響實際吞吐量，例如半雙工與全雙工，電纜長度和質量。帶寬和吞吐量均以每秒比特數（bps）以及前綴K（千比特），M（兆比特）或G（千兆比特）來衡量。每條以太網類別（貓）電纜均支持不同的以太網標準，從而確定帶寬容量或最大吞吐量。下表顯示了根據以太網類型的帶寬。 \n \n \n \n \n \n \n以太網類型帶寬容量描述\n以太網10 Mbps 1000萬比特/秒\n快速以太網100 Mbps每秒1億位\n千兆以太網1000 Mbps或1 Gbps每秒10億位\n40吉比特以太網40 Gbps 400億比特/秒\n100 Gb以太網100 Gbps 1000億比特/秒 \n \n \n \n \n Now that you have a general understanding of networking hardware, application of standards for LANs (local area networks) and WANs (wide area networks), and the limitations of the media used, you should be able to plan adding a network node to an already existing network. For example, you could add a new computer to your company’s wired LAN. In such situations, the majority of the hardware installation is plug and play (PnP), but you still have to know that the hardware and media chosen are correct, configure software settings for network access, and verify the new hardware will function properly to allow user access to all network resources. 既然您已經對網絡硬件，LAN（局域網）和WAN（廣域網）的標準的應用以及所用媒體的限制有了一般的了解，那麼您應該能夠計劃將網絡節點添加到已經現有網絡。例如，您可以將新計算機添加到公司的有線局域網中。在這種情況下，大多數硬件安裝都是即插即用（PnP），但您仍然必須知道所選的硬件和媒體是正確的，配置用於網絡訪問的軟件設置，並驗證新硬件是否正常運行以允許用戶訪問所有網絡資源。 Current technology in most small office/home office (SOHO) environments will have auto-sensing networking hardware. There are older switches and routers that still remain in some networks that do not have the ability to run at 100/1000BaseT, so check your network documentation! \n 大多數小型辦公室/家庭辦公室（SOHO）環境中的當前技術都將具有自動感應網絡硬件。在某些網絡中仍然存在一些較舊的交換機和路由器，這些交換機和路由器仍無法在100 / 1000BaseT上運行，因此請查看您的網絡文檔！ \n Media\xa0\xa0 媒體 \n Installing a wired connection onto the network means knowing if the NIC (network interface card) of the device can also auto-negotiate throughput based on the cable media used. Again, new or current technology should be auto-sensing and auto-negotiating (speed, duplex mode and other network parameters). The most important decision for the technician is selecting the correct type of Ethernet cable to connect the device. Recall that the cable standards will restrict distance as well as throughput. A cat 5 cable was standard for 100BaseT but will limit throughput to 100 Mbps so you must use cat 5e or cat 6 if you are trying to achieve 1000BaseT (1 Gbps). \n 在網絡上安裝有線連接意味著要知道設備的NIC（網絡接口卡）是否還可以根據所使用的電纜介質自動協商吞吐量。同樣，新技術或當前技術應該是自動感應和自動協商（速度，雙工模式和其他網絡參數）。對於技術人員而言，最重要的決定是選擇正確類型的以太網電纜來連接設備。回想一下，電纜標準將限制距離以及吞吐量。 Cat 5電纜是100BaseT的標準配置，但會將吞吐量限制為100 Mbps，因此，如果要實現1000BaseT（1 Gbps），則必須使用Cat 5e或Cat 6。 \n Distance\xa0\xa0 距離 \n Most current SOHO environments will have Ethernet wall jacks internally connecting to the next network device, be it a switch or a hub. But, if there is not a connection already present, you must remember that all copper-based Ethernet cable is limited to 100 meters. Do not run the wire in an area where the cabling can cause a safety hazard, become damaged due to environmental conditions, or suffer from electromagnetic interference (EMI). \n \n 當前大多數SOHO環境將在內部將以太網牆壁插孔連接到下一個網絡設備，無論是交換機還是集線器。但是，如果尚不存在連接，則必須記住所有基於銅纜的以太網電纜限制為100米。請勿在可能會導致安全隱患，因環境條件而損壞電纜或遭受電磁干擾（EMI）的區域中佈線。 \n \n Verify Connectivity\xa0\xa0 驗證連接性 \n After the machine is connected and powered on (assuming Windows 7 or later), watch the system tray after boot-up to see if there is a wired network icon. The standard Windows 7 icons are: \n \n 連接機器並打開電源後（假設使用Windows 7或更高版本），啟動後請查看系統托盤，以查看是否有有線網絡圖標。 Windows 7的標準圖標是：\n\n顯示三個圖標。第一個圖標（標記為：已連接）是計算機屏幕，左側帶有插頭和電纜。標記為斷開連接的第二個圖標與第一個圖標相同，但是帶有一個黃色三角形，其中帶有感嘆號。標為“已禁用”的第三個圖標與帶有紅色X的第一個圖標相同。 Access the “network sharing center” to select the type of network access you need to have and add any devices required for the node (e.g., a printer). Verify access by opening the browser or using a command line tool to verify connectivity and addressing. 訪問“網絡共享中心”以選擇所需的網絡訪問類型，並添加該節點所需的任何設備（例如打印機）。通過打開瀏覽器或使用命令行工具來驗證訪問權限，以驗證連接性和地址。 \n As an A+ certified technician, you will be introduced to the basics of computer networking, which is further covered when learning the CompTIA Net+ standards. Although CompTIA A+ does not test on the open systems interconnection model (OSI model), it is a theoretical model that is the basis for the way data travels through computer networks. When you click on an icon and connect to the Internet through a browser such as Google Chrome, Mozilla Firefox, or Internet Explorer, a request to connect is sent through a series of steps from the application layer down to the physical layer. All data physically enters and exits a computer node (client, server, or printer) through a network interface card (NIC) based on the type of medium being used (wireless, copper, or fiber-optic). The data packets are represented and interpreted using the binary number system. \n \n \n 作為A +認證的技術人員，將向您介紹計算機網絡的基礎知識，在學習CompTIA Net +標準時將進一步介紹這些知識。儘管CompTIA A +沒有在開放系統互連模型（OSI模型）上進行測試，但它是一種理論模型，是數據在計算機網絡中傳輸的基礎。當您單擊圖標並通過瀏覽器（例如Google Chrome，Mozilla Firefox或Internet Explorer）連接到Internet時，連接請求將通過從應用程序層到物理層的一系列步驟發送。根據使用的介質類型（無線，銅纜或光纖），所有數據都通過網絡接口卡（NIC）物理地進入和退出計算機節點（客戶端，服務器或打印機）。數據包使用二進制數字系統表示和解釋。 \n \n Protocols\xa0\xa0 規約 \n In computer networking, a protocol is a set of communication rules by which data communication occurs. The popularity of Ethernet is based on the standardization of protocols and ability to use the TCP/IP suite to carry data throughout a variety of hardware devices. \n 在計算機網絡中，協議是通過其進行數據通信的一組通信規則。以太網的普及是基於協議的標準化以及使用TCP / IP套件在各種硬件設備中傳輸數據的能力。 \n Ethernet\xa0\xa0 乙太網路 \n Ethernet is defined by the IEEE 802.3 specification, which sets the standard and interoperability between devices, allowing communication over computer networks. These specifications control how data physically travels between nodes on both the physical layer and the data link layer through media access control (MAC). The hardware controlled by these specifications include NICs, wiring (i.e., cat 5, 5e, and 6) including the RJ-45 connectors, switches, and hubs. \n 以太網由IEEE 802.3規範定義，該規範設置了設備之間的標準和互操作性，並允許通過計算機網絡進行通信。這些規範通過媒體訪問控制（MAC）控制數據在物理層和數據鏈路層上的節點之間的物理傳輸方式。這些規範所控制的硬件包括NIC，包括RJ-45連接器，交換機和集線器在內的佈線（即Cat 5、5e和6）。 \n TCP/IP \n Whereas Ethernet controls the physical data, transmission control protocol and Internet protocol (TCP/IP) is a suite of protocols that operate logically throughout the different layers of the OSI model as well as in the TCP/IP model. \n \n \n 以太網控制物理數據，而傳輸控制協議和Internet協議（TCP / IP）是一套協議，可以在OSI模型的不同層以及TCP / IP模型中進行邏輯操作。 \n \n \n \n A good analogy to help understand how Ethernet uses TCP/IP to transport data is to consider the old pneumatic tube systems used by banks. The tube and the carrier that the deposit envelope is placed in represent Ethernet. The envelope and the currency represent a protocol from the TCP/IP suite used throughout different layers (see additional information \xa0 here ). \n \n \n \n \n \n learn by doing \n \n 一個很好的類比可以幫助理解以太網如何使用TCP / IP傳輸數據，是考慮銀行使用的舊式氣動系統。放置存款信封的管子和載體代表以太網。信封和貨幣表示不同層使用的來自TCP / IP套件的協議（請參見此處的其他信息）。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Overview\xa0 \xa0\xa0總覽.html'}, {'title': 'homework 2', 'text': '\n InputElement studListUrl = querySelector("#studListUrl");\n\xa0\xa0String studUrl;\n\xa0\xa0InputElement courseName = querySelector("#courseName");\n\xa0\xa0String cName;\n\xa0\xa0// 將 Label 改為 Textarea, 避免產生過程結果嵌入所在頁面\n\xa0\xa0TextAreaElement output = querySelector("#output");\n\xa0\xa0\xa0\nmain() {\n\xa0\xa0querySelector("#submit").onClick.listen((e) => grouping());\n}\n\xa0\xa0\xa0\ngrouping() {\n\xa0\xa0output.innerHtml = "";\n\xa0\xa0\xa0\n\xa0\xa0if (studListUrl.value != "") {\n\xa0\xa0\xa0\xa0studUrl = studListUrl.value;\n\xa0\xa0} else {\n\xa0\xa0\xa0\xa0studUrl = \'https://nfulist.herokuapp.com\';\n\xa0\xa0}\n\xa0\xa0\xa0\n\xa0\xa0if (courseName.value != "") {\n\xa0\xa0\xa0\xa0cName = courseName.value;\n\xa0\xa0} else {\n\xa0\xa0\xa0\xa0cName = "cp2020";\n\xa0\xa0}\n\xa0\xa0\xa0\n\xa0\xa0// 組序由 1 開始\n\xa0\xa0int gth = 1;\n\xa0\xa0// 迴圈序號變數\n\xa0\xa0int i;\n\xa0\xa0int j;\n\xa0\xa0int total;\n\xa0\xa0int inc;\n\xa0\xa0// 每組學員暫存數列\n\xa0\xa0var gpList = [];\n\xa0\xa0// 全班分組數列\n\xa0\xa0var group = [];\n\xa0\xa0// 各組人數數列\n\xa0\xa0var numList = [];\n\xa0\xa0\xa0\n\xa0\xa0HttpRequest.getString(studUrl).then((String resp) {\n\xa0\xa0\xa0\xa0// 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \\n 轉為數列\n\xa0\xa0\xa0\xa0var studList = resp.trim().split("\\n");\n\xa0\xa0\xa0\xa0// 數列利用 shuffle() 方法以隨機方法弄亂順序\n\xa0\xa0\xa0\xa0studList.shuffle();\n\xa0\xa0\xa0\xa0total = studList.length;\n\xa0\xa0\xa0\xa0output.text += "全班總計" + total.toString() + " 人\\n";\n\xa0\xa0\xa0\xa0numList = getNumList(studList.length);\n\xa0\xa0\xa0\xa0inc = 0;\n\xa0\xa0\xa0\xa0for (i in numList){\n\xa0\xa0\xa0\xa0\xa0\xa0// 列印區隔符號\n\xa0\xa0\xa0\xa0\xa0\xa0output.text += \'=\' * 20 + "\\n";\n\xa0\xa0\xa0\xa0\xa0\xa0output.text += "group $gth 有 " + i.toString() + " 人: \\n";\n\xa0\xa0\xa0\xa0\xa0\xa0gpList = [];\n\xa0\xa0\xa0\xa0\xa0\xa0for (j = 0; j < i; j++){\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0output.text += studList[j+inc] + "\\n";\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// 在各分組數列中加入將對應的學員學號\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0gpList.add(studList[j+inc]);\n\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0\xa0\xa0gth = gth + 1;\n\xa0\xa0\xa0\xa0\xa0\xa0inc = inc + j;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0//output.text += studList[j] + "\\n";\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// 逐步將各組暫存的分組數列加入全班分組數列中\n\xa0\xa0\xa0\xa0\xa0\xa0gpList.sort();\n\xa0\xa0\xa0\xa0\xa0\xa0group.add(gpList);\n\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0// 列出全班分組數列\n\xa0\xa0\xa0\xa0output.text += group.toString() + "\\n";\n\xa0\xa0\xa0\xa0// 列出已經排序後的分組名單\n\xa0\xa0\xa0\xa0output.text += \'=\' * 25 + "\\n";\n\xa0\xa0\xa0\xa0output.text += \'以下為排序後的各組成員名單: \\n\';\n\xa0\xa0\xa0\xa0gth = 1;\n\xa0\xa0\xa0\xa0/*\n\xa0\xa0\xa0\xa0404231\n\xa0\xa0\xa0\xa0s4052\n\xa0\xa0\xa0\xa04062\n\xa0\xa0\xa0\xa0s4072\n\xa0\xa0\xa0\xa04082\n\xa0\xa0\xa0\xa05072\n\xa0\xa0\xa0\xa05083\n\xa0\xa0\xa0\xa0*/\n\xa0\xa0\xa0\xa0// 先列出純文字以 \\n 跳行組員資料\n\xa0\xa0\xa0\xa0for (i=0; i < group.length; i++){\n\xa0\xa0\xa0\xa0\xa0\xa0// 列印區隔符號\n\xa0\xa0\xa0\xa0\xa0\xa0output.text += \'=\' * 20 + "\\n";\n\xa0\xa0\xa0\xa0\xa0\xa0output.text += "group $gth \\n";\n\xa0\xa0\xa0\xa0\xa0\xa0gpList = [];\n\xa0\xa0\xa0\xa0\xa0\xa0for (j=0; j < group[i].length; j++){\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0output.text += group[i][j] + "\\n";\n\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0\xa0\xa0gth = gth + 1;\n\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0gth = 1;\n\xa0\xa0\xa0\xa0// 最後列出超文件以 <br\\> 跳行組員資料, 包含倉儲與網站\n\xa0\xa0\xa0\xa0for (i=0; i < group.length; i++){\n\xa0\xa0\xa0\xa0\xa0\xa0// 列印區隔符號\n\xa0\xa0\xa0\xa0\xa0\xa0output.text += \'\\n\' + \'=\' * 30 + "<br \\>";\n\xa0\xa0\xa0\xa0\xa0\xa0output.text += "group $gth <br \\>";\n\xa0\xa0\xa0\xa0\xa0\xa0gpList = [];\n\xa0\xa0\xa0\xa0\xa0\xa0for (j=0; j < group[i].length; j++){\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if (group[i][j].startsWith(\'4052\') || group[i][j].startsWith(\'4072\')) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0output.text += "Repository: <a href=\'https://github.com/s" +\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0group[i][j] + "/" + cName + "\'>" + group[i][j] + \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"</a>" + " | Site: <a href=\'https://s" + group[i][j] +\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0".github.io/" + cName + "\'>" + group[i][j] +\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"</a><br \\>";\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0else {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0output.text += "Repository: <a href=\'https://github.com/" +\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0group[i][j] + "/" + cName +"\'>" + group[i][j] +\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"</a>" + " | Site: <a href=\'https://" + group[i][j] +\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0".github.io/" + cName + "\'>" + group[i][j] +\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"</a><br \\>";\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0\xa0\xa0gth = gth + 1;\n\xa0\xa0\xa0\xa0}\n\xa0\xa0});\n}\n\xa0\xa0\xa0\nList getNumList(int total){\n\xa0\xa0// total student number\n\xa0\xa0// int total = 65;\n\xa0\xa0// initial each group expect to be "eachGrp" number of people\n\xa0\xa0int eachGrp = 10;\n\xa0\xa0// may divide into "grpNum" number of group\n\xa0\xa0int grpNum = total ~/ eachGrp;\n\xa0\xa0// vacant list\n\xa0\xa0var splits = [];\n\xa0\xa0// find remainder when total number divid into "grpNum" number of group\n\xa0\xa0int remainder = total % grpNum;\n\xa0\xa0// number of people in one group by calculation\n\xa0\xa0int calGrp = total ~/ grpNum;\n\xa0\xa0\xa0\n\xa0\xa0for (int i = 0; i < grpNum; i++) {\n\xa0\xa0\xa0\xa0splits.add(calGrp);\n\xa0\xa0}\n\xa0\xa0//print(splits);\n\xa0\xa0\xa0\n\xa0\xa0for (int i = 0; i < remainder; i++) {\n\xa0\xa0\xa0\xa0splits[i] += 1;\n\xa0\xa0}\n\xa0\xa0//print(splits);\n\xa0\xa0return splits;\n\xa0}</pre>\n<p>index.html</p>\n<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"><h4>亂數分組:</h4>\n學員名單 URL: <input type="text" id="studListUrl" size="60" value="https://nfulist.herokuapp.com"><br />\n課程代號: <input type="text" id="courseName" size="15" value="cp2020"><br />\n<input type="submit" value="開始分組" id="submit"><br />\n<textarea id="output" cols="80" rows="10"></textarea></pre>\n<p>style.css</p>\n<pre class="brush:css;auto-links:false;toolbar:false" contenteditable="false">body {\n\xa0\xa0color: white;\n\xa0\xa0font-size: 20px;\n}\n\xa0\xa0\ninput, select, textarea {\nfont-size: 100%;\n}</pre>\n<p>even_grouping.py</p>\n<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import random\nimport requests\n\xa0\xa0\xa0\n# getNumList 主要在每組最低人數下, 將不足 10 人的分組\n# 平均分配至各組\ndef getNumList(total, eachGrp=10):\n\xa0\xa0\xa0\xa0# total is the number of students\n\xa0\xa0\xa0\xa0# each group at least 10 students\n\xa0\xa0\xa0\xa0#eachGrp = 10;\n\xa0\xa0\xa0\xa0# may divide into "grpNum" number of group\n\xa0\xa0\xa0\xa0grpNum = total // eachGrp;\n\xa0\xa0\xa0\xa0# check grpNum\n\xa0\xa0\xa0\xa0#print(grpNum)\n\xa0\xa0\xa0\xa0# vacan list\n\xa0\xa0\xa0\xa0splits = []\n\xa0\xa0\xa0\xa0# find remainder when total number divid into "grpNum" number of group\n\xa0\xa0\xa0\xa0remainder = total % grpNum\n\xa0\xa0\xa0\xa0# number of people in one group by calculation\n\xa0\xa0\xa0\xa0calGrp = total // grpNum\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0for i in range(grpNum):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0splits.append(calGrp)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0# check first splits\n\xa0\xa0\xa0\xa0#print(splits)\n\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0for i in range(remainder):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0splits[i] += 1\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0# check final splits\n\xa0\xa0\xa0\xa0#print(splits);\n\xa0\xa0\xa0\xa0return splits;\n\xa0\xa0\xa0\n# 儲存學生名單資料的 url\ntarget_url = "http://mde.tw/cp2020/downloads/get_student_list/2020spring_cd_2a_list.txt"\n# 利用 requests 讀取 url 中的資料\nf = requests.get(target_url)\n# get student list from target_url\n# 利用 splitlines() 將資料放入數列 studList\nstudList = f.text.splitlines()\n# 每組預計分組的最低人數\nnum_in_one_group = 10\n# 每組學員暫存數列\ngpList = []\n# 全班分組數列\ngroup = []\n# 各組人數數列\nnumList = []\n# get numList\nnumList = getNumList(len(studList), num_in_one_group)\n# check numList\n# 列出已經補齊的各組人數數列\nprint("預計各組人數數列:" + str(numList))\n\xa0\xa0\xa0\noutput = ""\ngth = 1\ninc = 0\n\xa0\xa0\xa0\n# 弄亂 studList\nrandom.shuffle(studList)\noutput += "以下為尚未排序前的各組學員學號: \\n"\nfor i in numList:\n\xa0\xa0\xa0\xa0# 列印區隔符號\n\xa0\xa0\xa0\xa0output += \'=\' * 20 + "\\n";\n\xa0\xa0\xa0\xa0output += "group " + str(gth) + " 有 " + str(i) + " 人: \\n"\n\xa0\xa0\xa0\xa0# 每組學員暫存數列, 在此 reset\n\xa0\xa0\xa0\xa0gpList = []\n\xa0\xa0\xa0\xa0for j in range(i):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0output += studList[j+inc] + "\\n"\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0# 在各分組數列中加入將對應的學員學號\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0gpList.append(studList[j+inc])\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0gth = gth + 1\n\xa0\xa0\xa0\xa0inc = inc + j\n\xa0\xa0\xa0\xa0# 將各組學員數列依照學號排序\n\xa0\xa0\xa0\xa0gpList.sort()\n\xa0\xa0\xa0\xa0group.append(gpList)\n\xa0\xa0\xa0\n# 列出尚未排序前的分組結果\nprint(output)\n# 列出已經完成排序的分組數列\nprint("已經排序後的分組數列:" + str(group))\n\xa0\xa0\xa0\noutput = ""\n# 列出已經排序後的分組名單\noutput += \'=\' * 25 + "\\n"\noutput += \'以下為排序後的各組成員名單:\\n\'\ngth = 1\n\xa0\xa0\xa0\n# 先列出純文字以 \\n 跳行組員資料\nfor i in range(len(group)):\n\xa0\xa0\xa0\xa0# 列印區隔符號\n\xa0\xa0\xa0\xa0output += \'=\' * 20 + "\\n"\n\xa0\xa0\xa0\xa0output += "group" + str(gth) + "\\n"\n\xa0\xa0\xa0\xa0gpList = []\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0for j in range(len(group[i])):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0output += str(group[i][j]) + "\\n"\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0\xa0gth = gth + 1\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\nprint(output)</pre>\n<h4>使用 Brython</h4>\n<p><a href="http://mde.tw/lab/content/Python.html">http://mde.tw/lab/content/Python.html</a></p>\n<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 利用 Brython 內建的 open 開啟 url 後, 以 read() 將資料取出\noutput = open(\'http://mde.tw/cp2020/downloads/get_student_list/2020spring_cd_2a_list.txt\').read()\n\n \n \n \n \n \n', 'tags': '', 'url': 'homework 2.html'}, {'title': 'homework 3', 'text': 'Exercise 13 (and \xa0 Solution )\xa0 \xa0 練習13（和解決方案） \n Write a program that asks the user how many Fibonnaci numbers to generate and then generates them. Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.( Hint: The Fibonnaci seqence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence. The sequence looks like this: 1, 1, 2, 3, 5, 8, 13, … ) \n 編寫一個程序，詢問用戶要生成多少斐波那契數字，然後生成它們。藉此機會考慮如何使用功能。確保要求用戶輸入要生成的序列中的數字。（提示：Fibonnaci序列是一個數字序列，其中序列中的下一個數字是序列中前兩個數字的和。該序列看起來像這樣：1、1、2、3、5、8、13…） \n List Remove Duplicates\xa0 \nExercise 14 (and \xa0 Solution )\xa0\xa0 練習14（和解決方案） \n Write a program (function!) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates. \n 編寫一個包含一個列表並返回一個新列表的程序（函數！），該列表包含第一個列表的所有元素減去所有重複項。 \n Extras: \n \n Write two different functions to do this - one using a loop and constructing a list, and another using sets. \n Go back and do \xa0 Exercise 5 \xa0 using sets, and write the solution for that in a different function.\xa0 \n \xa0 附加功能： 編寫兩個不同的函數來執行此操作-一個使用循環並構造一個列表，另一個使用集合。 返回並使用集合進行練習5，然後使用其他函數編寫解決方案。 \n \n \n \n \n Discussion\xa0\xa0 討論區 \n Concepts for this week: \n \n Sets\xa0 \xa0 本週的概念： 套裝 \n \n \n \n \n \n \n', 'tags': '', 'url': 'homework 3.html'}, {'title': 'Sets', 'text': 'In mathematics, a\xa0 set \xa0 is a collection of elements where no element is repeated. This becomes useful because if you know your data is stored in a set, you are guaranteed to have unique elements. \n 在數學中，集合是元素的集合，其中不重複任何元素。這很有用，因為如 \n   names   =   set () \n   names . add ( "Michele" ) \n   names . add ( "Robin" ) \n   names . add ( "Michele" ) \n   print ( names ) \n 果您知道數據存儲在集合中，則可以保證具有唯一 \n Features of sets\xa0 集的特徵 \n \n Sets are \xa0 not ordered . This means that there is no “first element” or “last element.” There are just “elements”. You cannot ask a set for it’s “next element”. \n 集合不排序。這意味著不存在“第一個元素”或“最後一個元素”。只有“元素”。您不能向集合索要“下一個元素”。 \n There are no repeat elements in sets. \n 集合中沒有重複元素。 \n You can convert between sets and lists very easily. \n 您可以非常輕鬆地在集合和列表之間進行轉換。 \n \n \n \n', 'tags': '', 'url': 'Sets.html'}, {'title': 'In Python', 'text': 'In Python, you make and use a set with the\xa0 set() \xa0 keyword. For example: \n 在Python中，您可以使用set（）關鍵字來創建和使用set。 \n  names = set()\n  names.add("Michele")\n  names.add("Robin")\n  names.add("Michele")\n  print(names) \n And the output will be;  輸出將是； \n   set([\'Michele\', \'Robin\']) \n You can do to a set almost anything you can do to a list (except ask for things like “the third element”). See the\xa0 Python documentation about sets \xa0 to get a full list of things you can do to sets. 您可以設置一個集合，幾乎可以對列表執行任何操作（要求“第三個元素”之類的東西除外）。請參閱有關集合的Python文檔以獲取可以對集合進行操作的完整列表。 You can convert from a list to a set and a set to a list pretty easily: 您可以很容易地將列表轉換為集合，然後將集合轉換為列表： \n names = ["Michele", "Robin", "Sara", "Michele"]\n  names = set(names)\n  names = list(names)\n  print(names) \n And the result of this will be: 結果是： \n  [\'Michele\', \'Robin\', \'Sara\'] \n Cows And Bulls\xa0 \xa0 \xa0 \n Exercise 18 (and \xa0 Solution )\xa0 練習18（和解決方案） \n Create a program that will play the “cows and bulls”game with the user. The game works like this: \n 創建一個程序，將與用戶一起玩“牛與牛”遊戲。 Randomly generate a 4-digit number. Ask the user to guess a 4-digit number. For every digit that the user guessed correctly\xa0 in the correct place , they have a “cow”. For every digit the user guessed correctly \xa0 in the wrong place \xa0 is a “bull.” Every time the user makes a guess, tell them how many “cows” and “bulls” they have. Once the user guesses the correct number, the game is over. Keep track of the number of guesses the user makes throughout teh game and tell the user at the end. 隨機生成一個4位數字。要求用戶猜測一個4位數字。對於用戶在正確位置正確猜到的每個數字，他們都有一個“牛”。用戶在錯誤的位置正確猜出的每個數字都是“牛”。每次用戶猜測時，告訴他們他們有多少“牛”和“牛”。一旦用戶猜出正確的數字，遊戲就結束了。跟踪用戶在整個遊戲中所做的猜測數量，並在最後告訴用戶。 Say the number generated by the computer is 1038. An example interaction could look like this: 假設計算機生成的數字是1038。 \n  Welcome to the Cows and Bulls Game! \n  Enter a number: \n  >>> 1234\n  2 cows, 0 bulls\n  >>> 1256\n  1 cow, 1 bull\n  ...\n \n Until the user guesses the number.   直到用戶猜出數字。 \n Concepts for this week:\xa0 本週的概念： \n \n Randomness (we’ve covered this a few times before. Mainly in \xa0 a previous exercise .) \n Functions (covered in a \xa0 previous exercise \xa0 also) \n Main method \n \n 隨機性（我們之前已經討論過幾次了。主要是在以前的練習中。） 功能（也在上一練習中介紹過） 主要方法 \n Main method\xa0 主要方法 \n Since we have covered randomness and functions, we still need to cover the idea of a “main” method. If you have programmed before, you will wonder why you haven’t needed a main method so far in your Python code. \n 由於我們已經涵蓋了隨機性和函數，因此我們仍然需要涵蓋“主”方法的思想。如果您以前編程過，您會想知道為什麼到目前為止您的Python代碼中不需要主要方法。 \n First, here is how you do it:\xa0首先，這是您的操作方法 \n  def square(num):\n    return num * num\n\n  if __name__=="__main__":\n    user_num = input("Give me a number: ")\n    print(square(num)) \n Note that in both\xa0 __name__ \xa0 and \xa0 __main__ , there are TWO underscore ( _ ) characters. 請注意，在__name__和__main__中，都有兩個下劃線（_）字符。 If you run this program, it behaves as expected: asking the use for a number and printing out the square in return. However, you might be wondering - how is this different from the way we’ve been writing programs until this point? 如果您運行該程序，它的行為將與預期的一樣：要求輸入數字並打印出正方形。但是，您可能想知道-到目前為止，這與我們編寫程序的方式有何不同？ \n  def square(num):\n    return num * num\n\n  user_num = input("Give me a number: ")\n  print(square(num)) \n You are correct if you think the second example will have THE SAME BEHAVIOR as in the first case. At least the way we’ve been running Python files until this point. I will attempt to explain. \n 如果您認為第二個示例將具有與第一種情況相同的行為，則您是正確的。至少到現在為止，我們一直在運行Python文件的方式。我將嘗試解釋。 \n Python does not have a specified entry point like many other languages (for example, C++ always looks for a\xa0 void main() \xa0 method to run). Python files and programs are executed line by line by the Python interpreter, from however the Python file or program is run. When the definition of a function is reached by the interpreter, the function is not run, but rather loaded to be run later. (We discussed this when we talked about functions in a \xa0 previous post .) Whatever is written outside of a function will get executed immediately - this includes creating variables and calling the functions that were previously loaded. \n Python沒有像許多其他語言一樣具有指定的入口點（例如，C ++始終尋找要運行的void main（）方法）。 Python解釋器逐行執行Python文件和程序，但是會運行Python文件或程序。當解釋器到達函數的定義時，該函數不會運行，而是會加載以供以後運行。 （在上一篇文章中討論函數時，我們已經進行了討論。）在函數外部編寫的任何內容都將立即執行-這包括創建變量和調用先前加載的函數。 \n \n There are (most commonly) two ways to run a Python file: \n \n “Just running it” (which you can do from the terminal, through the “Run” button in IDLE, etc.) \n Importing the file as a module \n \n 有（最常見的）兩種運行Python文件的方式： “僅運行它”（您可以從終端通過IDLE中的“運行”按鈕執行此操作，等等） 將文件導入為模塊 The first way is the way that you most likely have been using if you have been doing the exercises in this blog. If you have many files in a large project, this is how you run the “entry point” file in the project. \n 第一種方法是您在本博客中進行練習時最可能使用的方法。如果大型項目中有許多文件，這就是在項目中運行“入口點”文件的方式。 \n \n The second way is more subtle: it is what happens when you write an \xa0 import \xa0 statement at the top of your file. In this exercise for example, you need to \xa0 import random \xa0 into your program to use the random module. Somewhere on your computer there is a file (or a group of Python files) that make up the \xa0 random \xa0 module, and in the process of importing them, what you are actually doing is running the file(s) from that module. \n \n When you have functions defined inside a file (with the \xa0 def \xa0 keyword, like the \xa0 def square \xa0 function above) and run a file, the function is not immediately run. You can think what happens is the function is stored for future use. \n \n 第二種方法更加微妙：這是在文件頂部編寫導入語句時發生的。例如，在本練習中，您需要將random導入程序中才能使用random模塊。在計算機上的某個地方，有一個文件（或一組Python文件）組成了隨機模塊，並且在導入它們的過程中，您實際上正在做的是從該模塊運行文件。 當您在文件內部定義了函數（使用def關鍵字，例如上面的def square函數）並運行文件時，該函數不會立即運行。您可以認為會發生什麼事，該函數已存儲以備將來使用。 \n \n Anything else in the file - variables created, functions that are called, operations done, etc - are executed immediately when a Python file is run. \n \n 運行Python文件時，文件中的所有其他內容-創建的變量，調用的函數，完成的操作等-都會立即執行。 \n \n However, in the case where you are importing a Python file into another, you want to load all of the functions without creating variables or executing any functions. You just want to load them to use them later. How do you reconcile this problem? With the\xa0 if __name__=="__main__" \xa0 statement. Create your variables and all your functions inside this statement, and when you import your file into another, it will not mess up your program by creating variables or calling functions. \n \n 但是，在將Python文件導入到另一個文件的情況下，您希望加載所有函數而不創建變量或執行任何函數。您只想加載它們以供以後使用。您如何調和這個問題？使用if __name __ ==“ __ main__”語句。在此語句內創建變量和所有函數，並且在將文件導入另一個語句時，它不會通過創建變量或調用函數而使程序混亂。 \n \n What the\xa0 if __name__=="__main__" \xa0 statement from above does is ensure that variables that are created, functions that are called, operations that are done, etc ONLY when you directly run the file, not when you import it into another. \n \n 上面的if __name __ ==“ __ main__”語句的作用是確保僅在直接運行文件時（而不是在將文件導入到另一個文件中時）創建的變量，調用的函數，完成的操作等。 \n \n \n \n \n \n \n \n \xa0 \n \n \xa0 \n \n \n \xa0', 'tags': '', 'url': 'In Python.html'}]};